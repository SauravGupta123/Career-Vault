generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // Clerk user ID
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?    // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  credits       Int       @default(3) // Default 3 credits for new users

  // Profile fields
  bio           String?
  experience    Int?      // Years of experience
  
  // Relations
  skills        String[]  
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  payments      Payments[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     
  questions     Json[]    
  category      String    
  improvementTip String?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique   
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text 
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    
  jobDescription  String?
  companyName     String    
  jobTitle        String    
  status          String    @default("draft") 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  
  users         User[]
  salaryRanges  Json[]    
  growthRate    Float     
  demandLevel   String    
  topSkills     String[]  
  marketOutlook String    
  keyTrends     String[]  
  recommendedSkills String[]  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  

  @@index([industry])
}

model Payments {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount       Float    
  paymentDate  DateTime @default(now()) 
  status       String   @default("pending") // "pending", "successful", "failed"

  @@index([userId])
}
